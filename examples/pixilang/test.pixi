set_pixel_size( WINDOW_XSIZE / 480 )
resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )
scr = get_screen()
xsize = get_xsize( scr )
ysize = get_ysize( scr )

sv = sv_new() //create a new SunVox sound stream

version_major = ( SV_VERSION >> 24 ) & 255;
version_minor1 = ( SV_VERSION >> 16 ) & 255;
version_minor2 = ( SV_VERSION >> 8 ) & 255;
version_minor3 = SV_VERSION & 255;
logf( "SunVox version: %d.%d.%d.%d\n", version_major, version_minor1, version_minor2, version_minor3 )

//load SunVox-compatible file (sunvox, xm, mod, midi):
while 1
{
    if sv_load( sv, "../../resources/test.sunvox" ) == 0 { break }
    if sv_load( sv, "../sound_files/test.sunvox" ) == 0 { break }
    break
}

proj_name = sv_get_name( sv )
proj_len_frames = sv_get_length_frames( sv )
proj_len_lines = sv_get_length_lines( sv )
proj_num_pats = sv_get_number_of_patterns( sv )
proj_num_modules = sv_get_number_of_modules( sv )

//Print project info:
printf(
    "Name: %s\nLength: %d s; %d lines;\nPats: %d;\nModules: %d\n",
    proj_name,
    proj_len_frames / sv_get_sample_rate( sv ),
    proj_len_lines,
    proj_num_pats,
    proj_num_modules )
for( m = 0; m < proj_num_modules; m + 1 )
{
    flags = sv_get_module_flags( sv, m )
    if( ( flags & SV_MODULE_FLAG_EXISTS ) == 0 ) { continue }
    printf( "Module%d: %s (%s); color=%x\n", m, sv_get_module_name( sv, m ), sv_get_module_type( sv, m ), sv_get_module_color( sv, m ) )
    cn = sv_get_number_of_module_ctls( sv, m )
    for( c = 0; c < cn; c + 1 )
    {
	printf( "  ctl %d.%s: %d / %d-%d (type %d) (offset %d)\n",
    	    c,
    	    sv_get_module_ctl_name( sv, m, c ),
    	    sv_get_module_ctl_value( sv, m, c, 0 ),
    	    sv_get_module_ctl_min( sv, m, c ),
    	    sv_get_module_ctl_max( sv, m, c ),
    	    sv_get_module_ctl_type( sv, m, c ),
    	    sv_get_module_ctl_offset( sv, m, c ) )
    }
}

//sv_set_autostop( sv, 1 ); //0 - autostop disabled (default); 1 - the song will be stopped at the end;
sv_play( sv, 0 ) //play from the beginning

while 1 //Wait for the EVT_QUIT event:
{
    clear()

    ts = ""
    sprintf(
	ts,
	"Name: %s\nLength: %d s; %d lines;\nPats: %d\nLine %d\nLine (fixed point) %d\nSignal level %d\nBPM %d; TPL %d",
	proj_name,
	proj_len_frames / sv_get_sample_rate( sv ),
	proj_len_lines,
	proj_num_pats,
	sv_get_current_line( sv ),
	sv_get_current_line2( sv ),
	sv_get_current_signal_level( sv, 0 ),
	sv_get_bpm( sv ),
	sv_get_tpl( sv )
    )
    print( ts, -xsize/2, -ysize/2, WHITE, LEFT | TOP )

    while( get_event() ) { if EVT[ EVT_TYPE ] == EVT_QUIT { breakall } }
    //if sv_get_status( s ) == 0 { breakall } //break the loop when playback is stopped (due to autostop)
    frame()
}

remove( proj_name )
sv_remove( sv ) //remove the SunVox stream